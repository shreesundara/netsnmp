 #include <net-snmp/net-snmp-config.h>
 #include <net-snmp/net-snmp-features.h>
 #include <net-snmp/net-snmp-includes.h>
 #include <net-snmp/agent/net-snmp-agent-includes.h>
 #include <net-snmp/agent/table_container.h>
 #include <net-snmp/library/container.h>

 #include "@@SUBSTITUTE_TABLE_NAME@@.h"
 #include "@@SUBSTITUTE_TABLE_NAME@@_interface.h"

 netsnmp_feature_require(baby_steps)
 netsnmp_feature_require(row_merge)
 netsnmp_feature_require(check_all_requests_error)

 typedef struct @@SUBSTITUTE_TABLE_NAME@@_interface_ctx_s {
	 netsnmp_container *container;
	 netsnmp_cache *cache;
	 @@SUBSTITUTE_TABLE_NAME@@_registration *user_ctx;
	 netsnmp_table_registration_info tbl_info;
	 netsnmp_baby_steps_access_methods access_multiplexer;
 }@@SUBSTITUTE_TABLE_NAME@@_interface_ctx;

 static @@SUBSTITUTE_TABLE_NAME@@_interface_ctx @@SUBSTITUTE_TABLE_NAME@@_if_ctx;
 static void _@@SUBSTITUTE_TABLE_NAME@@_container_init(@@SUBSTITUTE_TABLE_NAME@@_interface_ctx *if_ctx);
 static void _@@SUBSTITUTE_TABLE_NAME@@_container_shutdown(@@SUBSTITUTE_TABLE_NAME@@_interface_ctx *if_ctx);

 netsnmp_container *@@SUBSTITUTE_TABLE_NAME@@_container_get(void) {
	 return @@SUBSTITUTE_TABLE_NAME@@_if_ctx.container;
 }

 @@SUBSTITUTE_TABLE_NAME@@_registration *@@SUBSTITUTE_TABLE_NAME@@_registration_get(void) {
	 return @@SUBSTITUTE_TABLE_NAME@@_if_ctx.user_ctx;
 }

 @@SUBSTITUTE_TABLE_NAME@@_registration *@@SUBSTITUTE_TABLE_NAME@@_registration_set(@@SUBSTITUTE_TABLE_NAME@@_registration *newreg) {
	 @@SUBSTITUTE_TABLE_NAME@@_registration *old = @@SUBSTITUTE_TABLE_NAME@@_if_ctx.user_ctx;
	 @@SUBSTITUTE_TABLE_NAME@@_if_ctx.user_ctx = newreg;
	 return old;
 }

 int @@SUBSTITUTE_TABLE_NAME@@_container_size(void) {
	 return CONTAINER_SIZE(@@SUBSTITUTE_TABLE_NAME@@_if_ctx.container);
 }

 static Netsnmp_Node_Handler _mfd_@@SUBSTITUTE_TABLE_NAME@@_pre_request;
 static Netsnmp_Node_Handler _mfd_@@SUBSTITUTE_TABLE_NAME@@_post_request;
 static Netsnmp_Node_Handler _mfd_@@SUBSTITUTE_TABLE_NAME@@_object_lookup;
 static Netsnmp_Node_Handler _mfd_@@SUBSTITUTE_TABLE_NAME@@_get_values;

 void _@@SUBSTITUTE_TABLE_NAME@@_initialize_interface(@@SUBSTITUTE_TABLE_NAME@@_registration *reg_ptr, u_long flags) {
	 netsnmp_baby_steps_access_methods *access_multiplexer = &@@SUBSTITUTE_TABLE_NAME@@_if_ctx.access_multiplexer;
	 netsnmp_table_registration_info *tbl_info = &@@SUBSTITUTE_TABLE_NAME@@_if_ctx.tbl_info;
	 netsnmp_handler_registration *reginfo;
	 netsnmp_mib_handler *handler;
	 int mfd_modes = 0;

	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_@@SUBSTITUTE_TABLE_NAME@@_initialize_interface","called\n"));

	 netsnmp_table_helper_add_indexes(tbl_info @@SUBSTITUTE_NET_SNMP_TYPES_OF_ALL_IDX@@, 0);

	 tbl_info->min_column = @@SUBSTITUTE_TABLE_NAME_UPPER@@_MIN_COL;
	 tbl_info->max_column = @@SUBSTITUTE_TABLE_NAME_UPPER@@_MAX_COL;
	 @@SUBSTITUTE_TABLE_NAME@@_if_ctx.user_ctx = reg_ptr;
	 @@SUBSTITUTE_TABLE_NAME@@_init_data(reg_ptr);
	 _@@SUBSTITUTE_TABLE_NAME@@_container_init(&@@SUBSTITUTE_TABLE_NAME@@_if_ctx);
	 if ( NULL == @@SUBSTITUTE_TABLE_NAME@@_if_ctx.container) {
		 snmp_log(LOG_ERR, "could not initialize container for @@SUBSTITUTE_TABLE_NAME@@\n");
		 return;
	 }

	 access_multiplexer->object_lookup = _mfd_@@SUBSTITUTE_TABLE_NAME@@_object_lookup;
	 access_multiplexer->get_values = _mfd_@@SUBSTITUTE_TABLE_NAME@@_get_values;
	 access_multiplexer->pre_request = _mfd_@@SUBSTITUTE_TABLE_NAME@@_pre_request;
	 access_multiplexer->post_request = _mfd_@@SUBSTITUTE_TABLE_NAME@@_post_request;

	 DEBUGMSGTL(("@@SUBSTITUTE_TABLE_NAME@@:init_@@SUBSTITUTE_TABLE_NAME@@","Registering @@SUBSTITUTE_TABLE_NAME@@ as a mibs-for-dummies table.\n"));

	 handler = netsnmp_baby_steps_access_multiplexer_get(access_multiplexer);
	 reginfo = netsnmp_handler_registration_create("@@SUBSTITUTE_TABLE_NAME@@", handler, @@SUBSTITUTE_TABLE_NAME@@_oid, @@SUBSTITUTE_TABLE_NAME@@_oid_size, HANDLER_CAN_BABY_STEP | HANDLER_CAN_RONLY);

	 if (NULL == reginfo) {
		 snmp_log(LOG_ERR, "error registering table @@SUBSTITUTE_TABLE_NAME@@\n");
		 return;
	 }

	 reginfo->my_reg_void = &@@SUBSTITUTE_TABLE_NAME@@_if_ctx;

	 if (access_multiplexer->object_lookup)
		 mfd_modes |= BABY_STEP_OBJECT_LOOKUP;

	 if (access_multiplexer->pre_request)
		 mfd_modes |= BABY_STEP_PRE_REQUEST;

	 if (access_multiplexer->post_request)
		 mfd_modes |= BABY_STEP_POST_REQUEST;

 // Not Reqd..
 //    #if (access_multiplexer->set_values)
 //    #   mfd_modes |= BABY_STEP_SET_VALUES;
 //    #if(access_multiplexer->irreversible_commit)
 //    #   mfd_modes |= BABY_STEP_IRREVERSIBLE_COMMIT;
 //    #if(access_multiplexer->object_syntax_checks)
 //    #   mfd_modes |= BABY_STEP_CHECK_OBJECT;
 //    #if (access_multiplexer->undo_setup)
 //    #   mfd_modes |= BABY_STEP_UNDO_SETUP;
 //    #if (access_multiplexer->undo_cleanup)
 //    #   mfd_modes |= BABY_STEP_UNDO_CLEANUP;
 //    #if (access_multiplexer->undo_sets)
 //    #   mfd_modes |= BABY_STEP_UNDO_SETS;
 //    #if(access_multiplexer->row_creation)
 //    #   mfd_modes |= BABY_STEP_ROW_CREATE;
 //    #if(access_multiplexer->consistency_checks)
 //    #   mfd_modes |= BABY_STEP_CHECK_CONSISTENCY;
 //    #if(access_multiplexer->commit)
 //    #   mfd_modes |= BABY_STEP_COMMIT;
 //    #if(access_multiplexer->undo_commit)
 //    #   mfd_modes |= BABY_STEP_UNDO_COMMIT;
 //

	 handler = netsnmp_baby_steps_handler_get(mfd_modes);
	 netsnmp_inject_handler(reginfo, handler);
	 handler = netsnmp_get_row_merge_handler(reginfo->rootoid_len + 2);
	 netsnmp_inject_handler(reginfo, handler);

	 handler = netsnmp_container_table_handler_get(tbl_info, @@SUBSTITUTE_TABLE_NAME@@_if_ctx.container, TABLE_CONTAINER_KEY_NETSNMP_INDEX);
	 netsnmp_inject_handler(reginfo, handler);

	 if(NULL != @@SUBSTITUTE_TABLE_NAME@@_if_ctx.cache) {
		 handler = netsnmp_cache_handler_get(@@SUBSTITUTE_TABLE_NAME@@_if_ctx.cache);
		 netsnmp_inject_handler(reginfo, handler);
	 }

	 netsnmp_register_table(reginfo, tbl_info);
 }


 void _@@SUBSTITUTE_TABLE_NAME@@_shutdown_interface(@@SUBSTITUTE_TABLE_NAME@@_registration *reg_ptr) {
	 _@@SUBSTITUTE_TABLE_NAME@@_container_shutdown(&@@SUBSTITUTE_TABLE_NAME@@_if_ctx);
 }

 void @@SUBSTITUTE_TABLE_NAME@@_valid_columns_set(netsnmp_column_info *vc) {
	 @@SUBSTITUTE_TABLE_NAME@@_if_ctx.tbl_info.valid_columns = vc;
 }

 int @@SUBSTITUTE_TABLE_NAME@@_index_to_oid(netsnmp_index *oid_idx, @@SUBSTITUTE_TABLE_NAME@@_mib_index *mib_idx) {
	 int err = SNMP_ERR_NOERROR;

	 @@SUBSTITUTE_NET_SNMP_VARIABLE_LIST_FOR_ALL_INDEXES@@

	 @@SUBSTITUTE_INITIALIZE_NET_SNMP_VARIABLE_LIST_OF_INDEXES@@

	 DEBUGMSGTL(("verbose:@@SUBSTITUTE_TABLE_NAME@@:@@SUBSTITUTE_TABLE_NAME@@_index_to_oid","called\n"));

	 @@SUBSTITUTE_SNMP_VAR_VALUE_FOR_ALL_INDEXES@@

	 err = build_oid_noalloc(oid_idx->oids, oid_idx->len, &oid_idx->len, NULL, 0, &var_@@SUBSTITUTE_FIRST_IDX_NAME@@);
	 if(err) {
		 snmp_log(LOG_ERR, "error %d converting index to oid\n",err);
	 }
	 snmp_reset_var_buffers(&var_@@SUBSTITUTE_FIRST_IDX_NAME@@);
	 return err;
 }

 int @@SUBSTITUTE_TABLE_NAME@@_index_from_oid(netsnmp_index *oid_idx, @@SUBSTITUTE_TABLE_NAME@@_mib_index *mib_idx) {
	 int err = SNMP_ERR_NOERROR;

	 @@SUBSTITUTE_NET_SNMP_VARIABLE_LIST_FOR_ALL_INDEXES@@

	 @@SUBSTITUTE_INITIALIZE_NET_SNMP_VARIABLE_LIST_OF_INDEXES@@

	 DEBUGMSGTL(("verbose:@@SUBSTITUTE_TABLE_NAME@@:@@SUBSTITUTE_TABLE_NAME@@_index_from_oid","called\n"));

	 err = parse_oid_indexes( oid_idx->oids, oid_idx->len, &var_@@SUBSTITUTE_FIRST_IDX_NAME@@);
	 if (err == SNMP_ERR_NOERROR) {

		 @@SUBSTITUTE_UPDATE_MIB_IDX_FOR_ALL_INDEXES@@

	 }

	 snmp_reset_var_buffers(&var_@@SUBSTITUTE_FIRST_IDX_NAME@@);
	 return err;
 }

 @@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *@@SUBSTITUTE_TABLE_NAME@@_allocate_rowreq_ctx(void *user_init_ctx) {
	 @@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *rowreq_ctx = SNMP_MALLOC_TYPEDEF(@@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx);

	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:@@SUBSTITUTE_TABLE_NAME@@_allocate_rowreq_ctx","called\n"));

	 if(NULL == rowreq_ctx) {
		 snmp_log(LOG_ERR, "Could not allocate memory for a @@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx.\n" );
		 return NULL;
	 }

	 rowreq_ctx->oid_idx.oids = rowreq_ctx->oid_tmp;
	 rowreq_ctx->@@SUBSTITUTE_TABLE_NAME@@_data_list = NULL;
	 if(!(rowreq_ctx->rowreq_flags & MFD_ROW_DATA_FROM_USER)) {
		 if(SNMPERR_SUCCESS != @@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx_init(rowreq_ctx, user_init_ctx)) {
			 @@SUBSTITUTE_TABLE_NAME@@_release_rowreq_ctx(rowreq_ctx);
			 rowreq_ctx = NULL;
			}
	 }
	 return rowreq_ctx;
 }

 void @@SUBSTITUTE_TABLE_NAME@@_release_rowreq_ctx(@@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *rowreq_ctx) {
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:@@SUBSTITUTE_TABLE_NAME@@_release_rowreq_ctx","called\n"));

	 netsnmp_assert(NULL != rowreq_ctx);

	 @@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx_cleanup(rowreq_ctx);
	 if (rowreq_ctx->oid_idx.oids != rowreq_ctx->oid_tmp) {
		 free(rowreq_ctx->oid_idx.oids);
	 }

	 SNMP_FREE(rowreq_ctx);
 }

 static int _mfd_@@SUBSTITUTE_TABLE_NAME@@_pre_request(netsnmp_mib_handler *handler, netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *agtreq_info, netsnmp_request_info *requests) {
	 int rc;
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_mfd_@@SUBSTITUTE_TABLE_NAME@@_pre_request","called\n"));

	 if (1 != netsnmp_row_merge_status_first(reginfo, agtreq_info)) {
		 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@","skipping additional pre_request\n"));
		 return SNMP_ERR_NOERROR;
	 }

	 rc = @@SUBSTITUTE_TABLE_NAME@@_pre_request(@@SUBSTITUTE_TABLE_NAME@@_if_ctx.user_ctx);
	 if(MFD_SUCCESS != rc) {
		 DEBUGMSGTL(("@@SUBSTITUTE_TABLE_NAME@@","error %d from @@SUBSTITUTE_TABLE_NAME@@_pre_requests\n",rc));
		 netsnmp_request_set_error_all(requests, SNMP_VALIDATE_ERR(rc));
	 }

	 return SNMP_ERR_NOERROR;
 }

 static int _mfd_@@SUBSTITUTE_TABLE_NAME@@_post_request(netsnmp_mib_handler *handler, netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *agtreq_info, netsnmp_request_info *requests) {
	 @@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *rowreq_ctx = (@@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *)netsnmp_container_table_row_extract(requests);
	 int rc, packet_rc;
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_mfd_@@SUBSTITUTE_TABLE_NAME@@_post_request","called\n"));

	 if(rowreq_ctx && (rowreq_ctx->rowreq_flags & MFD_ROW_DELETED)) {
		 @@SUBSTITUTE_TABLE_NAME@@_release_rowreq_ctx(rowreq_ctx);
	 }

	 if (1 != netsnmp_row_merge_status_last(reginfo, agtreq_info)) {
		 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@","waiting for last post_request\n"));
		 return SNMP_ERR_NOERROR;
	 }

	 packet_rc = netsnmp_check_all_requests_error(agtreq_info->asp, 0);
	 rc = @@SUBSTITUTE_TABLE_NAME@@_post_request(@@SUBSTITUTE_TABLE_NAME@@_if_ctx.user_ctx, packet_rc);
	 if(MFD_SUCCESS != rc) {
		 DEBUGMSGTL(("@@SUBSTITUTE_TABLE_NAME@@","error %d from @@SUBSTITUTE_TABLE_NAME@@_post_request\n",rc));
	 }
	 return SNMP_ERR_NOERROR;
 }

 static int _mfd_@@SUBSTITUTE_TABLE_NAME@@_object_lookup(netsnmp_mib_handler *handler, netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *agtreq_info, netsnmp_request_info *requests) {
	 int rc = SNMP_ERR_NOERROR;
	 @@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *rowreq_ctx = (@@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx*)netsnmp_container_table_row_extract(requests);

	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_mfd_@@SUBSTITUTE_TABLE_NAME@@_object_lookup","called\n"));

	 if(NULL == rowreq_ctx) {
		 rc = SNMP_ERR_NOCREATION;
	 }

	 if(MFD_SUCCESS != rc) {
		 netsnmp_request_set_error_all(requests, rc);
	 }
	 else {
		 @@SUBSTITUTE_TABLE_NAME@@_row_prep(rowreq_ctx);
	 }

	 return SNMP_VALIDATE_ERR(rc);
 }

 NETSNMP_STATIC_INLINE int _@@SUBSTITUTE_TABLE_NAME@@_get_column(@@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *rowreq_ctx, netsnmp_variable_list *var, int column) {
	 int rc = SNMPERR_SUCCESS;
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_mfd_@@SUBSTITUTE_TABLE_NAME@@_get_column","called for %d\n",column));

	 netsnmp_assert(NULL != rowreq_ctx);

	 switch(column) {
		 @@SUBSTITUTE_NET_SNMP_INTERNAL_GET_LOGIC_FOR_ALL_IDX_OR_COL@@

		 default:
			 if(@@SUBSTITUTE_TABLE_NAME_UPPER@@_MIN_COL <= column && column <= @@SUBSTITUTE_TABLE_NAME_UPPER@@_MAX_COL) {
				 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_mfd_@@SUBSTITUTE_TABLE_NAME@@_get_column","assume column %d is reserved\n",column));
				 rc = MFD_SKIP;
			 }else {
				 snmp_log(LOG_ERR, "unknown column %d in _@@SUBSTITUTE_TABLE_NAME@@_get_column\n",column);
			 }
			 break;
	 }//end of switch-case

	 return rc;
 }

 int _mfd_@@SUBSTITUTE_TABLE_NAME@@_get_values(netsnmp_mib_handler *handler, netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *agtreq_info, netsnmp_request_info *requests) {
	 @@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *rowreq_ctx = (@@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx*)netsnmp_container_table_row_extract(requests);
	 netsnmp_table_request_info *tri;
	 u_char *old_string;
	 void (*dataFreeHook)(void*);
	 int rc;
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_mfd_@@SUBSTITUTE_TABLE_NAME@@_get_values","called\n"));
 			
	 netsnmp_assert(NULL != rowreq_ctx);

	 for(;requests;requests = requests->next) {
		 old_string = requests->requestvb->val.string;
		 dataFreeHook = requests->requestvb->dataFreeHook;
		 if (NULL == requests->requestvb->val.string) {
			 requests->requestvb->val.string =requests->requestvb->buf;
			 requests->requestvb->val_len = sizeof(requests->requestvb->buf);
		 }
		 else if (requests->requestvb->buf == requests->requestvb->val.string) {
			 if(requests->requestvb->val_len != sizeof(requests->requestvb->buf)) {
				 requests->requestvb->val_len = sizeof(requests->requestvb->buf);
			 }
		 }

		 tri = netsnmp_extract_table_info(requests);
		 if(NULL == tri) {
			 continue;
		 }
		 rc = _@@SUBSTITUTE_TABLE_NAME@@_get_column(rowreq_ctx, requests->requestvb, tri->colnum);
		 if(rc) {
			 if(MFD_SKIP == rc) {
				 requests->requestvb->type = SNMP_NOSUCHINSTANCE;
				 rc = SNMP_ERR_NOERROR;
			 }
		 }
		 else if (NULL == requests->requestvb->val.string) {
			 snmp_log(LOG_ERR, "NULL varbind data pointer!\n");
			 rc = SNMP_ERR_GENERR;
		 }
		 if(rc) {
			 netsnmp_request_set_error(requests, SNMP_VALIDATE_ERR(rc));
		 }
		 if(old_string && (old_string != requests->requestvb->buf) && (requests->requestvb->val.string != old_string )) {
			 if(dataFreeHook) {
				 (*dataFreeHook)(old_string);
			 }
			 else {
				 free(old_string);
			 }
		 }
	 }

	 return SNMP_ERR_NOERROR;
 }

 static void _container_free(netsnmp_container *container);
 static int _cache_load(netsnmp_cache *cache, void *vmagic) {
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_cache_load","called\n"));

	 if((NULL == cache) || (NULL == cache->magic)) {
		 snmp_log(LOG_ERR, "invalid cache for @@SUBSTITUTE_TABLE_NAME@@_cache_load\n");
		 return -1;
	 }

	 netsnmp_assert((0 == cache->valid) || (1 == cache->expired));
	 return @@SUBSTITUTE_TABLE_NAME@@_container_load((netsnmp_container*)cache->magic);
 }

 static void _cache_free(netsnmp_cache *cache, void *magic) {
	 netsnmp_container *container;
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_cache_free","called\n"));

	 if((NULL == cache) || (NULL == cache->magic)) {
		 snmp_log(LOG_ERR,"invalid cache in @@SUBSTITUTE_TABLE_NAME@@_cache_free\n");
		 return;
	 }
	 container = (netsnmp_container*)cache->magic;
	 _container_free(container);
 }

 static void _container_item_free(@@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *rowreq_ctx, void *context) {
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_container_item_free","called\n"));

	 if(NULL == rowreq_ctx) {
		 return ;
	 }
	 @@SUBSTITUTE_TABLE_NAME@@_release_rowreq_ctx(rowreq_ctx);
 }

 static void _container_free(netsnmp_container *container) {
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_container_free","called\n"));

	 if(NULL == container) {
		 snmp_log(LOG_ERR, "invalid container in @@SUBSTITUTE_TABLE_NAME@@_container_free\n");
		 return ;
	 }
	 @@SUBSTITUTE_TABLE_NAME@@_container_free(container);
	 CONTAINER_CLEAR(container, (netsnmp_container_obj_func *)_container_item_free, NULL);
 }

 void _@@SUBSTITUTE_TABLE_NAME@@_container_init(@@SUBSTITUTE_TABLE_NAME@@_interface_ctx *if_ctx) {
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_@@SUBSTITUTE_TABLE_NAME@@_container_init","called\n"));

	 if_ctx->cache = netsnmp_cache_create(30, _cache_load, _cache_free, @@SUBSTITUTE_TABLE_NAME@@_oid, @@SUBSTITUTE_TABLE_NAME@@_oid_size);

	 if(NULL == if_ctx->cache) {
		 snmp_log(LOG_ERR,"error creating cache for @@SUBSTITUTE_TABLE_NAME@@\n");
		 return;
	 }

	 if_ctx->cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET;
	 @@SUBSTITUTE_TABLE_NAME@@_container_init(&if_ctx->container, if_ctx->cache);
	 if(NULL == if_ctx->container) {
		 if_ctx->container = netsnmp_container_find("@@SUBSTITUTE_TABLE_NAME@@:table_container");
	 }
	 if(NULL == if_ctx->container) {
		 snmp_log(LOG_ERR,"error creating container in @@SUBSTITUTE_TABLE_NAME@@_container_init\n");
		 return;
	 }

	 if(NULL != if_ctx->cache) {
		 if_ctx->cache->magic = (void*)if_ctx->container;
	 }
 }

 void _@@SUBSTITUTE_TABLE_NAME@@_container_shutdown(@@SUBSTITUTE_TABLE_NAME@@_interface_ctx *if_ctx) {
	 DEBUGMSGTL(("internal:@@SUBSTITUTE_TABLE_NAME@@:_@@SUBSTITUTE_TABLE_NAME@@_container_shutdown","called\n"));

	 @@SUBSTITUTE_TABLE_NAME@@_container_shutdown(if_ctx->container);
	 _container_free(if_ctx->container);
 }

 @@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *@@SUBSTITUTE_TABLE_NAME@@_row_find_by_mib_index(@@SUBSTITUTE_TABLE_NAME@@_mib_index *mib_idx) {
	 @@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *rowreq_ctx;
	 oid oid_tmp[MAX_OID_LEN];
	 netsnmp_index oid_idx;
	 int rc;
	 oid_idx.oids = oid_tmp;
	 oid_idx.len = sizeof(oid_tmp)/sizeof(oid);

	 rc = @@SUBSTITUTE_TABLE_NAME@@_index_to_oid(&oid_idx, mib_idx);
	 if(MFD_SUCCESS != rc) {
		 return NULL;
	 }

	 rowreq_ctx = (@@SUBSTITUTE_TABLE_NAME@@_rowreq_ctx *)CONTAINER_FIND(@@SUBSTITUTE_TABLE_NAME@@_if_ctx.container, &oid_idx);
	 return rowreq_ctx;
 }